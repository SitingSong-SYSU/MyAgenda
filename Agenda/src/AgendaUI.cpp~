#include <iomanip>
#include "AgendaUI.hpp"

AgendaUI::AgendaUI() {
  startAgenda();
}

void AgendaUI::OperationLoop(void) {
  char operation;
  do {
    std::cout << "---------------------Agenda---------------------\n"
              << "Action:\n"
              << "l   - log in Agenda by username and password\n"
              << "r   - register an Agenda account\n"
              << "q   - quit Agenda\n"
              << "------------------------------------------------\n"
              << "\nAgenda:~$";
    std::cin >> operation;
    std::cout << std::endl;
    switch (operation) {
      case 'l':
        userLogIn(); break;
      case 'r':
        userRegister(); break;
      case 'q':
        quitAgenda(); break;
    };
  }while(operation != 'q');
}

void AgendaUI::startAgenda(void) {
  m_agendaService.startAgenda();
}

std::string AgendaUI::getOperation() {
  std::string operation;
  std::cout << "---------------------Agenda---------------------\n"
            << "Action:\n"
            << "o   - log out Agenda\n"
            << "dc  - delete Agenda account\n"
            << "lu  - list all Agenda user\n"
            << "cm  - creat a meeting\n"
            << "la  - list all meetings\n"
            << "las - list all sponsor meetings\n"
            << "lap - list all participate meetings\n"
            << "qm  - query meeting by title\n"
            << "qt  - query meeting by time interval\n"
            << "dm  - delete meeting by title\n"
            << "da  - delete all meetings\n"
            << "------------------------------------------------\n"
            << "\nAgenda@" << m_userName << ":#";
  std::cin >> operation;
  std::cout << std::endl;
  return operation;
}

bool AgendaUI::executeOperation(std::string t_operation) {
  if (t_operation == "o") {
    userLogOut();
    return false;
  } else if (t_operation == "dc") {
    deleteUser();
    return false;
  } else if (t_operation == "lu") {
    listAllUsers();
    return true;
  } else if (t_operation == "cm") {
    createMeeting();
    return true;
  } else if (t_operation == "la") {
    listAllMeetings();
    return true;
  } else if (t_operation == "las") {
    listAllSponsorMeetings();
    return true;
  } else if (t_operation == "lap") {
    listAllParticipateMeetings();
    return true;
  } else if (t_operation == "qm") {
    queryMeetingByTitle();
    return true;
  } else if (t_operation == "qt") {
    queryMeetingByTimeInterval();
    return true;
  } else if (t_operation == "dm") {
    deleteMeetingByTitle();
    return true;
  } else if (t_operation == "da") {
    deleteAllMeetings();
    return true;
  }
  return true;
}

void AgendaUI::userLogIn(void) {
  std::string username, password;
  std::cout << "[log in] [user name] [password]\n"
            << "[log in] ";
  std::cin >> username >> password;
  if (m_agendaService.userLogIn(username, password)) {
    m_userName = username;
    m_userPassword = password;
    std::cout << "[log in] succeed!" << std::endl;
    while (executeOperation(getOperation())) {}
  } else {
    std::cout << "[error] log in fail!" << std::endl;
  }
}

void AgendaUI::userRegister(void) {
  std::string username, password, email, phone;
  std::cout << "[register] [user name] [password] [email] [phone]\n"
            << "[register] ";
  std::cin >> username >> password >> email >> phone;
  if (m_agendaService.userRegister(username, password, email, phone)) {
    std::cout << "[register] succeed!" << std::endl;
  } else {
    std::cout << "[error] register fail!" << std::endl;
  }
}

void AgendaUI::quitAgenda(void) {
  m_agendaService.quitAgenda();
}

void AgendaUI::userLogOut(void) {
  m_userName = "";
  m_userPassword = "";
}

void AgendaUI::deleteUser(void) {
  if (m_agendaService.deleteUser(m_userName, m_userPassword)) {
    userLogOut();
    std::cout << "[delete Agenda account] succeed!" << std::endl;
  } else {
    std::cout << "[error] delete Agenda account fail!" << std::endl;
  }
}

void AgendaUI::listAllUsers(void) {
  std::list<User> t_users = m_agendaService.listAllUsers();
  std::cout << "[list all users]" << std::endl;
  std::cout << std::endl;
  std::cout << std::setiosflags(std::ios::left) << std::setfill(' ')
      << std::setw(5) << "no." << "| " << std::setw(10) << "name"  << "| "
      << std::setw(20) << "email" << "| "  << std::setw(15) << "phone" << std::endl;
  std::cout << std::setiosflags(std::ios::left) << std::setfill('-')
      << std::setw(50) << "-" << std::endl;
  int cnt = 0;
  std::list<std::string> t_name;
  std::list<std::string> t_email;
  std::list<std::string> t_phone;
  for (auto iter = t_users.begin(); iter != t_users.end(); iter++) {
    cnt++;
    for (int i = 0; i < iter->getName().size(); i += 8) {
      if (i + 8 <= iter->getName().size())
        t_name.push_back(iter->getName().substr(i, 8));
      else
        t_name.push_back(iter->getName().substr(i, iter->getName().size() - i));
    }
    for (int i = 0; i < iter->getEmail().size(); i+= 18) {
      if (i + 18 <= iter->getEmail().size())
        t_email.push_back(iter->getEmail().substr(i, 18));
      else
        t_email.push_back(iter->getEmail().substr(i, iter->getEmail().size() - i));
    }
    for (int i = 0; i < iter->getPhone().size(); i += 13) {
      if (i + 13 <= iter->getPhone().size())
        t_phone.push_back(iter->getPhone().substr(i, 13));
      else
        t_phone.push_back(iter->getPhone().substr(i, iter->getEmail().size() - i));
    }
    int na = t_name.size(), em = t_email.size(), ph = t_phone.size();
    int maxSize = (na > em) ? na: em;
    maxSize = ((maxSize > ph) ? maxSize : ph);
    std::string t_na, t_em, t_ph;
    for (int i = 0; i < maxSize; i++) {
      if (i < na) {
        t_na = t_name.front();
        t_name.pop_front();
      } else {
        t_na = " ";
      }
      if (i < em) {
        t_em = t_email.front();
        t_email.pop_front();
      } else {
        t_em = " ";
      }
      if (i < ph) {
        t_ph = t_phone.front();
        t_phone.pop_front();
      } else {
        t_ph = " ";
      }
      if (i == 0)
        std::cout << std::setiosflags(std::ios::left) << std::setfill(' ')
                  << std::setw(5) << cnt << "| " << std::setw(10) << t_na  << "| " 
                  << std::setw(20) << t_em << "| " << std::setw(15) << t_ph << std::endl;
      else
        std::cout << std::setiosflags(std::ios::left) << std::setfill(' ')
                  << std::setw(5) << " "  << "| " << std::setw(10) << t_na << "| " 
                  << std::setw(20) << t_em << "| " << std::setw(15) << t_ph << std::endl;
    }
  }
  std::cout << std::endl;
}

void AgendaUI::createMeeting(void) {
  int participatorNumber;
  std::string t_participator, title, sDate, eDate;
  std::vector<std::string> participator;
  std::cout << "[create meeting] [the number of participators]\n"
        << "[create meeting] ";
  std::cin >> participatorNumber;
  for (int i = 1; i <= participatorNumber; i++) {
    std::cout << "[create meeting] [please enter the participator "
      << i << " ]\n" << "[create meeting] ";
    std::cin >> t_participator;
    participator.push_back(t_participator);
  }
  std::cout << "[create meeting] [title][start time(yyyy-mm-dd/hh:mm)] "
        << "[end time(yyyy-mm-dd/hh:mm)]\n[create meeting] ";
  std::cin >> title >> sDate >> eDate;
  if (m_agendaService.createMeeting(m_userName,
    title, sDate, eDate, participator))
    std::cout << "[create meeting] succeed!" << std::endl;
  else
    std::cout << "[create meeting] error!" << std::endl;
}

void AgendaUI::listAllMeetings(void) {
  std::list<Meeting> t_meetings = m_agendaService.listAllMeetings(m_userName);
  std::cout << "[list all meetings]" << std::endl;
  std::cout << std::endl;
  printMeetings(t_meetings);
}

void AgendaUI::listAllSponsorMeetings(void) {
  std::list<Meeting> t_meetings
    = m_agendaService.listAllSponsorMeetings(m_userName);
  std::cout << "[list all sponsor meetings]" << std::endl;
  std::cout << std::endl;
  printMeetings(t_meetings);
}

void AgendaUI::listAllParticipateMeetings(void) {
  std::list<Meeting> t_meetings
    = m_agendaService.listAllParticipateMeetings(m_userName);
  std::cout << "[list all participator meetings]" << std::endl;
  std::cout << std::endl;
  printMeetings(t_meetings);
}

void AgendaUI::queryMeetingByTitle(void) {
  std::string title;
  std::cout << "[query meetings] [title]\n"
        << "[query meetings] ";
  std::cin >> title;
  std::cout << "[query meetings]" << std::endl;
  std::cout << std::endl;
  std::list<Meeting> t_meetings
    = m_agendaService.meetingQuery(m_userName, title);
  printMeetings(t_meetings);
}

void AgendaUI::queryMeetingByTimeInterval(void) {
  std::string sDate, eDate;
  std::cout << "[query meetings] [start time(yyyy-mm-dd/hh:mm)] "
        << "[end time(yyyy-mm-dd/hh:mm)]\n[query meetings] ";
  std::cin >> sDate >> eDate;
  std::cout << "[query meetings]" << std::endl;
  std::cout << std::endl;
  std::list<Meeting> t_meetings
    = m_agendaService.meetingQuery(m_userName, sDate, eDate);
  printMeetings(t_meetings);
}

void AgendaUI::deleteMeetingByTitle(void) {
  std::string title;
  std::cout << "[delete meeting] [title]\n"
        << "[delete meeting] ";
  std::cin >> title;
  std::cout << std::endl;
  if (m_agendaService.deleteMeeting(m_userName, title))
    std::cout << "[delete meeting by title] succeed!" << std::endl;
  else
    std::cout << "[error] delete meeting fail!" << std::endl;
}

void AgendaUI::deleteAllMeetings(void) {
  if (m_agendaService.deleteAllMeetings(m_userName))
    std::cout << "[delete all meetings] succeed!" << std::endl;
  else
    std::cout << "[error] delete meeting fail!" << std::endl;
}

void AgendaUI::printMeetings(std::list<Meeting> t_meetings) {
  std::cout << std::setiosflags(std::ios::left) << std::setfill(' ')
            << std::setw(5) << "no." << "| " << std::setw(10) << "title"
            << "| " << std::setw(10) << "sponsor" << "| "
            << std::setw(18) << "start time" << "| " << std::setw(18)
            << "end time" << "| " << std::setw(15) << "participator" << std::endl;
  std::cout << std::setiosflags(std::ios::left) << std::setfill('-')
            << std::setw(81) << "-" << std::endl;
  for (auto iter = t_meetings.begin(); iter != t_meetings.end(); iter++) {
    std::cout << std::setiosflags(std::ios::left) << std::setfill(' ')
          << std::setw(12) << iter->getTitle() << std::setw(8)
          << iter->getSponsor() << std::setw(18)
          << Date::dateToString(iter->getStartDate())
          << std::setw(18) << Date::dateToString(iter->getEndDate());
    std::vector<std::string> participator = iter->getParticipator();
    bool flag = false;
    for (auto it = participator.begin(); it != participator.end(); it++) {
      if (flag) std::cout << ",";
      std::cout << (*it);
      flag = true;
    }
    std::cout << std::endl;
  }
}
